# A macro to build an ArrayFire example
# For most uses only FIND_PACKAGE(ArrayFire REQUIRED), ADD_EXECUTABLE(...)
# and TARGET_LINK_LIBRARIES(... ${ARRAYFIRE_LIBRARIES}) are needed
MACRO(BUILD_SRC SRC_NAME SRC_SOURCE BACKEND_NAME BACKEND_LIBRARIES OTHER_LIBRARIES OUT_DIR_NAME)

  ADD_EXECUTABLE(example_${SRC_NAME}_${BACKEND_NAME} ${SRC_SOURCE})

  TARGET_LINK_LIBRARIES(example_${SRC_NAME}_${BACKEND_NAME}
    ${BACKEND_LIBRARIES} ${OTHER_LIBRARIES})

  SET_TARGET_PROPERTIES(example_${SRC_NAME}_${BACKEND_NAME}
    PROPERTIES
    OUTPUT_NAME ${SRC_NAME}_${BACKEND_NAME}
    RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR_NAME}
    FOLDER "${BACKEND_NAME}")
ENDMACRO()

# A macro to build a list of files
# For most uses only FIND_PACKAGE(ArrayFire REQUIRED), ADD_EXECUTABLE(...)
# and TARGET_LINK_LIBRARIES(... ${ARRAYFIRE_LIBRARIES}) are needed
MACRO(BUILD_BACKEND FILES BACKEND_NAME BACKEND_LIBRARIES OTHER_LIBRARIES)

  FOREACH(FILE ${FILES})
    GET_FILENAME_COMPONENT(SRC ${FILE} NAME_WE)
    GET_FILENAME_COMPONENT(FULL_DIR_NAME ${FILE} PATH)
    GET_FILENAME_COMPONENT(DIR_NAME ${FULL_DIR_NAME} NAME)

    BUILD_SRC(${SRC} ${FILE} ${BACKEND_NAME}
      "${BACKEND_LIBRARIES}"
      "${OTHER_LIBRARIES}" ${DIR_NAME})
  ENDFOREACH()
ENDMACRO()

MACRO(BUILD_ALL FILES)
  FIND_PACKAGE(ArrayFire REQUIRED)
  FIND_PACKAGE(CUDA QUIET)
  FIND_PACKAGE(OpenCL QUIET)

  INCLUDE_DIRECTORIES(
    "${CMAKE_CURRENT_SOURCE_DIR}/include"
    ${ArrayFire_INCLUDE_DIRS}
    )

  IF (${ArrayFire_CPU_FOUND})
    MESSAGE(STATUS "CPU backend is ON.")
    BUILD_BACKEND("${FILES}" cpu ${ArrayFire_CPU_LIBRARIES} "")
  ENDIF()

  IF (${OpenCL_FOUND} AND ${ArrayFire_OpenCL_FOUND})
    MESSAGE(STATUS "OPENCL backend is ON.")
    BUILD_BACKEND("${FILES}" opencl ${ArrayFire_OpenCL_LIBRARIES} "${OpenCL_LIBRARIES}")
  ENDIF()

  IF (${CUDA_FOUND} AND ${ArrayFire_CUDA_FOUND})
    FIND_LIBRARY( CUDA_NVVM_LIBRARY
      NAMES "nvvm"
      PATH_SUFFIXES "nvvm/lib64" "nvvm/lib"
      PATHS ${CUDA_TOOLKIT_ROOT_DIR}
      DOC "CUDA NVVM Library"
      )

    MESSAGE(STATUS "CUDA backend is ON.")
    BUILD_BACKEND("${FILES}" cuda ${ArrayFire_CUDA_LIBRARIES} "${CUDA_CUBLAS_LIBRARIES};${CUDA_LIBRARIES};${CUDA_cusolver_LIBRARY};${CUDA_CUFFT_LIBRARIES};${CUDA_NVVM_LIBRARY};${CUDA_CUDA_LIBRARY}")
  ENDIF()
ENDMACRO()
